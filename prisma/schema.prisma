generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Provider {
  GOOGLE
  FACEBOOK
  TWITTER
  INSTAGRAM
  LINKEDIN
  TIKTOK
}

model User {
  id            Int                @id @default(autoincrement())
  name          String?
  email         String?            @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String @db.VarChar(10) @default("USER")
  accounts      Account[]
  createdAt     DateTime           @default(now())
  subscriptions UserSubscription[]
  purchases     Purchase[]

  // Other fields can be added as needed
  ScheduledPosts ScheduledPosts[]
}

model Account {
  id            Int     @id @default(autoincrement())
  userId        Int
  type          String
  provider      String
  providerAccountId String
  refresh_token String? @db.Text
  access_token  String? @db.Text
  expires_at    Int?
  token_type    String?
  scope         String?
  id_token      String? @db.Text
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // Composite unique constraint
}

model VerificationToken {
  id      Int      @id @default(autoincrement())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      Int      @id @default(autoincrement())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model UserSubscription {
  id                     Int       @id @default(autoincrement())
  userId                 Int       @unique
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @unique @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @unique @map(name: "stripe_current_period_end")
  user                   User      @relation(fields: [userId], references: [id])
}

model Purchase {
  id        Int      @id @default(autoincrement())
  userId    Int
  amount    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StripeCustomer {
  id               Int    @id @default(autoincrement())
  userId           Int    @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model ScheduledPosts {
  id                  Int     @id @default(autoincrement())
  userId              Int
  s3Path              String  @db.VarChar(255)
  postTime            String  @db.VarChar(255)
  mediaType           String  @db.VarChar(20)
  schedulePostRequest String  @db.Text
  posted              Boolean

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
